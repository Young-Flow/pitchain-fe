/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/sps/{spId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** SP 상세 조회 */
    get: operations['getSpDetail'];
    /** SP 수정 */
    put: operations['updateSp'];
    post?: never;
    /** SP 삭제 */
    delete: operations['deleteSp'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/companies': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 회사 조회
     * @description 회사 정보 수정 시 사용
     */
    get: operations['getCompanyDetail'];
    /** 회사 정보 수정 */
    put: operations['updateCompany'];
    /** 회사 회원가입 */
    post: operations['createCompany'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/companies/passwords': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 회사 비밀번호 수정 */
    put: operations['updatePassword'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/companies/logoImgs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 회사 로고 이미지 수정 */
    put: operations['updateLogoImg'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/companies/emails': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 회사 이메일 중복 여부 확인
     * @description 회사 생성 및 수정 시 사용, 중복이면 true 반환
     */
    get: operations['checkEmail'];
    /** 회사 이메일 수정 */
    put: operations['updateEmail'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/bms/{bmId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** BM 상세 조회 */
    get: operations['getBmDetail'];
    /** BM 수정 */
    put: operations['updateBm'];
    /** BM PT 이미지 수정 */
    post: operations['updatePtImgs'];
    /** BM 삭제 */
    delete: operations['deleteBm'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/bms/{bmId}/comments/{commentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations['modifyComment'];
    post?: never;
    delete: operations['removeComment'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sps': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** SP 리스트 조회 */
    get: operations['getSpDetails'];
    put?: never;
    /** SP 생성 */
    post: operations['createSp'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sps/{spId}/like': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['toggleLikeSp'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/s3': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 파일(이미지, 동영상) 저장 / 개발용 */
    post: operations['uploadFile'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/preferences': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['createCategoryPref'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/oauth2/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 소셜 로그인
     * @description KAKAO: https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=891063e7c569324189a0353dfb18c534&redirect_uri={redirectURL}을 통해 code값 받아오기, NAVER: https://nid.naver.com/oauth2.0/authorize?response_type=code&client_id=T4z00JRW0P38KpqrIc6w&redirect_uri={redirectURL}을 통해 code값 받아오기
     */
    post: operations['socialLogin'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/histories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 사용자의 SP 시청 시간을 최초 저장 및 업데이트 */
    post: operations['saveMySpHistory'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dev-error/method-argument-not-valid': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** MethodArgumentNotValidException 발생 */
    post: operations['methodArgumentNotValidTest'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/companies/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 회사 로그인 */
    post: operations['loginCompany'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/bms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** BM 생성 */
    post: operations['createBm'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/bms/{bmId}/scrap': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['toggleScrapBm'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/bms/{bmId}/investments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['addInvestment'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/bms/{bmId}/comments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getComments'];
    put?: never;
    post: operations['addComment'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sps/category': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 카테고리별 SP 리스트 조회
     * @description 첫 조회 시 쿼리 파라미터에 lastSpId를 포함시키지 않습니다.
     */
    get: operations['getSpDetailsFilteredCategory'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dev-token': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 토큰 발급 / 개발용 */
    get: operations['token'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dev-model': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** AI 서버로 유저 선호도 정보 전송 / 개발용 */
    get: operations['devAI'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dev-error/illegal-argument': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** IllegalArgumentException 발생 */
    get: operations['illegalArgumentTest'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dev-error/general-handler': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** GeneralHandler 발생 */
    get: operations['generalExceptionTest'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dev-error/constraint-violation': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** ConstraintViolationException 발생 */
    get: operations['constraintViolationTest'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/currency': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['calculateExchangeRate'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/currency-test': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 외부 API 호출 확인 / 개발용 */
    get: operations['test'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/bms/{bmId}/investment': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getInvestmentStatus'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/s3/videos': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 파일(동영상) 삭제 / 개발용 */
    delete: operations['deleteVid'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/s3/images': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 파일(이미지) 삭제 / 개발용 */
    delete: operations['deleteImg'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/companies/{companyId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 회사 탈퇴 */
    delete: operations['deleteCompany'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CustomApiResponse: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: Record<string, never>;
    };
    UpdateCompanyReq: {
      name?: string;
      address?: string;
    };
    CustomApiResponseVoid: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: Record<string, never>;
    };
    UpdatePasswordReq: {
      originPassword?: string;
      newPassword?: string;
    };
    UpdateBmReq: {
      name?: string;
      /** @enum {string} */
      mainCategory?:
        | 'TECH_DIGITAL'
        | 'COMMERCE_PLATFORM_COMMUNITY'
        | 'FOOD'
        | 'SPORTS_OUTDOOR'
        | 'ENTERTAINMENT'
        | 'HR_LEGAL_BUSINESS'
        | 'MANUFACTURING_HARDWARE'
        | 'COMMUNICATION_SECURITY_DATA'
        | 'LIFESTYLE_LEISURE'
        | 'SCIENCE_TECHNOLOGY'
        | 'CREATION_CULTURE'
        | 'TRANSPORTATION_MOBILITY'
        | 'FINANCE_INSURANCE_FINTECH';
      subCategories?: (
        | 'AI_ML'
        | 'SAAS'
        | 'METAVERSE_CONTENT'
        | 'APP_DEVELOPMENT'
        | 'BLOCKCHAIN_WEB3'
        | 'IT_HARDWARE_DEVICES'
        | 'ECOMMERCE'
        | 'RESALE'
        | 'LOCAL_COMMUNITY_NETWORK'
        | 'REVIEW_CURATION'
        | 'LOCAL_FOOD'
        | 'FOREIGN_FOOD'
        | 'READY_MEAL_KIT'
        | 'HEALTH_DIET'
        | 'DESSERT_SNACKS'
        | 'SAUCES_SEASONINGS'
        | 'ALCOHOL'
        | 'BEVERAGE_COFFEE'
        | 'ESPORTS_PRODUCTS'
        | 'CAMPING'
        | 'HOME_TRAINING'
        | 'HIKING'
        | 'GOLF'
        | 'RUNNING'
        | 'FISHING'
        | 'TENNIS'
        | 'CYCLING'
        | 'SPORTS_LESSON_TRAINING'
        | 'ENTERTAINMENT_CONTENT'
        | 'BOARD_GAMES_TPRG'
        | 'ONLINE_GAMES'
        | 'DIGITAL_GAMES'
        | 'WEBTOONS_STORY_CONTENT'
        | 'LIVE_PERFORMANCE'
        | 'MUSIC'
        | 'VIDEO'
        | 'HR_SOLUTION'
        | 'LABOR_MANAGEMENT'
        | 'LEGAL_TECH'
        | 'CONSULTING'
        | 'REMOTE_WORK'
        | 'PR_MARKETING'
        | 'HIGH_TECH'
        | 'MEDIUM_TECH'
        | 'LOW_TECH'
        | 'TRADITIONAL_CRAFT'
        | 'NETWORK_COMMUNICATION'
        | 'DATA_ANALYTICS'
        | 'CYBER_SECURITY'
        | 'LEISURE_TOURISM'
        | 'BEAUTY_WELLNESS'
        | 'HOME_LIVING'
        | 'FASHION_CLOTHING'
        | 'PETS'
        | 'LODGING_RENTAL'
        | 'LIFE_SCIENCE_BIOTECH'
        | 'ENERGY_ENVIRONMENT_TECH'
        | 'RND_LAB_SERVICES'
        | 'ESG'
        | 'INDUSTRIAL_DESIGN'
        | 'ART_CRAFT'
        | 'PUBLISHING_LITERATURE'
        | 'PERFORMING_ARTS_EXHIBITION'
        | 'CULTURAL_HERITAGE'
        | 'RIDE_SHARING'
        | 'ELECTRIC_VEHICLE_TECH'
        | 'DRONES'
        | 'DIGITAL_FINANCE_PAYMENTS'
        | 'FINANCIAL_MANAGEMENT'
        | 'INSURE_TECH'
      )[];
      intro?: string;
      description?: string;
      address?: string;
      /** Format: int64 */
      valuationCap?: number;
      /** Format: int64 */
      goalInvestment?: number;
      /** Format: int32 */
      maxIssuedShare?: number;
      /** Format: date */
      deadline?: string;
      longPitchURL?: string;
    };
    BmDetailRes: {
      /** Format: int64 */
      companyId?: number;
      companyLogoImgURL?: string;
      companyName?: string;
      companyAddress?: string;
      /** Format: int64 */
      bmId?: number;
      bmName?: string;
      intro?: string;
      mainCategory?: string;
      subCategories?: string[];
      description?: string;
      descImgURL?: string;
      bmAddress?: string;
      /** Format: date-time */
      createdAt?: string;
      longPitchURL?: string;
      isScraped?: boolean;
      /** Format: int64 */
      scrapCnt?: number;
      spURLs?: string[];
      ptImgResList?: components['schemas']['PtImgRes'][];
    };
    CustomApiResponseBmDetailRes: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: components['schemas']['BmDetailRes'];
    };
    PtImgRes: {
      /** Format: int32 */
      serialNum?: number;
      imgURL?: string;
    };
    ModifyCommentReq: {
      content?: string;
    };
    CreateSpReq: {
      /** Format: int64 */
      bmId?: number;
      name?: string;
    };
    CustomApiResponseString: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: string;
    };
    OauthLoginReq: {
      /**
       * @description 소셜 로그인 제공자
       * @enum {string}
       */
      oauthProvider: 'KAKAO' | 'GOOGLE' | 'NAVER';
      /** @description OAuth Provider Server로 부터 받은 인증 코드 */
      code: string;
    };
    CustomApiResponseLoginRes: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: components['schemas']['LoginRes'];
    };
    LoginRes: {
      accessToken?: string;
      refreshToken?: string;
    };
    SaveMySpHistoryReq: {
      /** Format: int64 */
      bmId: number;
      /**
       * Format: int32
       * @description 사용자가 해당 BM의 SP를 시청한 시간(ms 단위)
       */
      viewTime?: number;
    };
    TestDto: {
      name: string;
    };
    CreateCompanyReq: {
      email?: string;
      password?: string;
      passwordConfirmation?: string;
    };
    LoginCompanyReq: {
      email?: string;
      password?: string;
    };
    CreateBmReq: {
      /** Format: int64 */
      companyId?: number;
      name?: string;
      /** @enum {string} */
      mainCategory?:
        | 'TECH_DIGITAL'
        | 'COMMERCE_PLATFORM_COMMUNITY'
        | 'FOOD'
        | 'SPORTS_OUTDOOR'
        | 'ENTERTAINMENT'
        | 'HR_LEGAL_BUSINESS'
        | 'MANUFACTURING_HARDWARE'
        | 'COMMUNICATION_SECURITY_DATA'
        | 'LIFESTYLE_LEISURE'
        | 'SCIENCE_TECHNOLOGY'
        | 'CREATION_CULTURE'
        | 'TRANSPORTATION_MOBILITY'
        | 'FINANCE_INSURANCE_FINTECH';
      subCategories: (
        | 'AI_ML'
        | 'SAAS'
        | 'METAVERSE_CONTENT'
        | 'APP_DEVELOPMENT'
        | 'BLOCKCHAIN_WEB3'
        | 'IT_HARDWARE_DEVICES'
        | 'ECOMMERCE'
        | 'RESALE'
        | 'LOCAL_COMMUNITY_NETWORK'
        | 'REVIEW_CURATION'
        | 'LOCAL_FOOD'
        | 'FOREIGN_FOOD'
        | 'READY_MEAL_KIT'
        | 'HEALTH_DIET'
        | 'DESSERT_SNACKS'
        | 'SAUCES_SEASONINGS'
        | 'ALCOHOL'
        | 'BEVERAGE_COFFEE'
        | 'ESPORTS_PRODUCTS'
        | 'CAMPING'
        | 'HOME_TRAINING'
        | 'HIKING'
        | 'GOLF'
        | 'RUNNING'
        | 'FISHING'
        | 'TENNIS'
        | 'CYCLING'
        | 'SPORTS_LESSON_TRAINING'
        | 'ENTERTAINMENT_CONTENT'
        | 'BOARD_GAMES_TPRG'
        | 'ONLINE_GAMES'
        | 'DIGITAL_GAMES'
        | 'WEBTOONS_STORY_CONTENT'
        | 'LIVE_PERFORMANCE'
        | 'MUSIC'
        | 'VIDEO'
        | 'HR_SOLUTION'
        | 'LABOR_MANAGEMENT'
        | 'LEGAL_TECH'
        | 'CONSULTING'
        | 'REMOTE_WORK'
        | 'PR_MARKETING'
        | 'HIGH_TECH'
        | 'MEDIUM_TECH'
        | 'LOW_TECH'
        | 'TRADITIONAL_CRAFT'
        | 'NETWORK_COMMUNICATION'
        | 'DATA_ANALYTICS'
        | 'CYBER_SECURITY'
        | 'LEISURE_TOURISM'
        | 'BEAUTY_WELLNESS'
        | 'HOME_LIVING'
        | 'FASHION_CLOTHING'
        | 'PETS'
        | 'LODGING_RENTAL'
        | 'LIFE_SCIENCE_BIOTECH'
        | 'ENERGY_ENVIRONMENT_TECH'
        | 'RND_LAB_SERVICES'
        | 'ESG'
        | 'INDUSTRIAL_DESIGN'
        | 'ART_CRAFT'
        | 'PUBLISHING_LITERATURE'
        | 'PERFORMING_ARTS_EXHIBITION'
        | 'CULTURAL_HERITAGE'
        | 'RIDE_SHARING'
        | 'ELECTRIC_VEHICLE_TECH'
        | 'DRONES'
        | 'DIGITAL_FINANCE_PAYMENTS'
        | 'FINANCIAL_MANAGEMENT'
        | 'INSURE_TECH'
      )[];
      intro?: string;
      description?: string;
      address?: string;
      /** Format: int64 */
      valuationCap?: number;
      /** Format: int64 */
      goalInvestment?: number;
      /** Format: int32 */
      maxIssuedShare?: number;
      /** Format: date */
      deadline?: string;
      longPitchURL?: string;
    };
    AddInvestmentReq: {
      /** Format: int64 */
      amount?: number;
    };
    CustomApiResponseAddInvestmentReq: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: components['schemas']['AddInvestmentReq'];
    };
    AddCommentReq: {
      /** Format: int64 */
      parentCommentId?: number;
      content?: string;
    };
    CustomApiResponseListSpDetailRes: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: components['schemas']['SpDetailRes'][];
    };
    SpDetailRes: {
      /** Format: int64 */
      bmId?: number;
      bmName?: string;
      companyLogoImgURL?: string;
      companyName?: string;
      companyAddress?: string;
      spURL?: string;
      thumbnailImgURL?: string;
      /** Format: int32 */
      views?: number;
      name?: string;
      mainCategory?: string;
      subCategories?: string[];
      isLiked?: boolean;
      /** Format: int64 */
      likeCnt?: number;
    };
    CustomApiResponseSpDetailRes: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: components['schemas']['SpDetailRes'];
    };
    CustomApiResponseInfinityScrollResSpDetailRes: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: components['schemas']['InfinityScrollResSpDetailRes'];
    };
    InfinityScrollResSpDetailRes: {
      content?: components['schemas']['SpDetailRes'][];
      /** Format: int64 */
      lastElementId?: number;
    };
    CompanyDetailRes: {
      email?: string;
      logoImgKey?: string;
      name?: string;
      address?: string;
      isVerified?: boolean;
    };
    CustomApiResponseCompanyDetailRes: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: components['schemas']['CompanyDetailRes'];
    };
    CustomApiResponseBoolean: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: boolean;
    };
    BaseCommentRes: {
      /** Format: int64 */
      commentId?: number;
      delYN?: boolean;
      replyComments?: components['schemas']['ReplyCommentRes'][];
    };
    CustomApiResponseListBaseCommentRes: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      data?: components['schemas']['BaseCommentRes'][];
    };
    ReplyCommentRes: {
      /** Format: int64 */
      commentId?: number;
      /** Format: int64 */
      writerId?: number;
      writerNickname?: string;
      writerProfileImgURL?: string;
      content?: string;
      delYN?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getSpDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        spId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseSpDetailRes'];
        };
      };
    };
  };
  updateSp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        spId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          name: string;
          /** Format: binary */
          spVideo?: string;
          /** Format: binary */
          thumbnailImg?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  deleteSp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        spId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  getCompanyDetail: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseCompanyDetailRes'];
        };
      };
    };
  };
  updateCompany: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          req: components['schemas']['UpdateCompanyReq'];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseVoid'];
        };
      };
    };
  };
  createCompany: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCompanyReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseVoid'];
        };
      };
    };
  };
  updatePassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePasswordReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseVoid'];
        };
      };
    };
  };
  updateLogoImg: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': {
          /** Format: binary */
          logoImg: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseVoid'];
        };
      };
    };
  };
  checkEmail: {
    parameters: {
      query: {
        email: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseBoolean'];
        };
      };
    };
  };
  updateEmail: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseVoid'];
        };
      };
    };
  };
  getBmDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseBmDetailRes'];
        };
      };
    };
  };
  updateBm: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          updateBmReq: components['schemas']['UpdateBmReq'];
          /** Format: binary */
          descImg?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseBmDetailRes'];
        };
      };
    };
  };
  updatePtImgs: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          ptImgs?: string[];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  deleteBm: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  modifyComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
        commentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ModifyCommentReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  removeComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
        commentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  getSpDetails: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseListSpDetailRes'];
        };
      };
    };
  };
  createSp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          createSpReq: components['schemas']['CreateSpReq'];
          /** Format: binary */
          spVideo?: string;
          /** Format: binary */
          thumbnailImg?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  toggleLikeSp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        spId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  uploadFile: {
    parameters: {
      query: {
        s3UploadTarget:
          | 'COMPANY_DESC'
          | 'COMPANY_LOGO'
          | 'COMPANY_PT'
          | 'COMPANY_THUMBNAIL'
          | 'COMPANY_VIDEO'
          | 'MEMBER_PROFILE';
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseString'];
        };
      };
    };
  };
  createCategoryPref: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  socialLogin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OauthLoginReq'];
      };
    };
    responses: {
      /** @description 처리할 수 없는 소셜 로그인 */
      COMMON400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseLoginRes'];
        };
      };
      /** @description 로그인 성공 */
      COMMON200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseLoginRes'];
        };
      };
    };
  };
  saveMySpHistory: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SaveMySpHistoryReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  methodArgumentNotValidTest: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TestDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseString'];
        };
      };
    };
  };
  loginCompany: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginCompanyReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseLoginRes'];
        };
      };
    };
  };
  createBm: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          createBmReq: components['schemas']['CreateBmReq'];
          /** Format: binary */
          descImg?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  toggleScrapBm: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  addInvestment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddInvestmentReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseAddInvestmentReq'];
        };
      };
    };
  };
  getComments: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseListBaseCommentRes'];
        };
      };
    };
  };
  addComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddCommentReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  getSpDetailsFilteredCategory: {
    parameters: {
      query: {
        mainCategoryInKorean: string;
        lastSpId?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseInfinityScrollResSpDetailRes'];
        };
      };
    };
  };
  token: {
    parameters: {
      query: {
        id: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseString'];
        };
      };
    };
  };
  devAI: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  illegalArgumentTest: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  generalExceptionTest: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  constraintViolationTest: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  calculateExchangeRate: {
    parameters: {
      query: {
        amount: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  test: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  getInvestmentStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bmId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  deleteVid: {
    parameters: {
      query: {
        fileKey: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  deleteImg: {
    parameters: {
      query: {
        fileKey: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponse'];
        };
      };
    };
  };
  deleteCompany: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CustomApiResponseVoid'];
        };
      };
    };
  };
}
